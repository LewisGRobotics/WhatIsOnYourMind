{"version":3,"sources":["components/GenericButton.js","components/TextInput.js","components/Thought.js","components/ThoughtsPage.js","config.js","App.js","reportWebVitals.js","index.js"],"names":["GenericButton","onClick","text","className","TextInput","setText","defaultText","sendMessage","type","maxLength","defaultValue","onChange","e","target","value","onKeyDown","key","Thought","id","thoughtText","ThoughtsPage","thoughts","thoughtArray","undefined","length","numberArray","index","Math","floor","random","includes","push","console","log","map","thought","window","location","reload","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","firebase","apps","initializeApp","useState","userTextInput","setUserTextInput","messages","setMessages","database","ref","useEffect","getMessages","a","on","snapshot","state","val","set","href","path","exact","render","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d20e728e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst GenericButton = ({onClick, text}) => {\r\n    \r\n    return (\r\n        <button className=\"GenericButton\" onClick={onClick}>\r\n          {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default GenericButton\r\n","const TextInput = ({setText, defaultText, sendMessage}) => {\r\n    \r\n    const keydown = (key) =>{\r\n        if(key === 'Enter') sendMessage();\r\n    }\r\n    return (\r\n        <input className=\"TextInput\" type=\"Text\" maxLength=\"100\" defaultValue={defaultText} onChange={(e) => setText(e.target.value)} onKeyDown={(e) =>keydown(e.key)}/>\r\n    )\r\n}\r\n\r\nexport default TextInput\r\n","const Thought = ({id , thoughtText}) => {\r\n    return (\r\n        <div className=\"container\">  \r\n            <h3>\r\n                {thoughtText}\r\n            </h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Thought\r\n","import Thought from './Thought';\r\nimport GenericButton from './GenericButton';\r\n\r\nconst ThoughtsPage = ({thoughts}) => {\r\n    const numberOfEntriesToShow = 8;\r\n\r\n    var thoughtArray = []\r\n\r\n    if(thoughts !== undefined){\r\n        // Select random thoughts if the database is too big.\r\n        if(thoughts.length > numberOfEntriesToShow){\r\n            // Create an array of random numbers, with maximum values of the amount of thoughts\r\n            const numberArray = [];\r\n            while(numberArray.length < numberOfEntriesToShow){\r\n                const index = Math.floor(Math.random() * thoughts.length);\r\n                if(!numberArray.includes(index) && thoughts[index] !== undefined){\r\n                    numberArray.push(index);\r\n                    thoughtArray.push(thoughts[index])\r\n                    console.log(\"A thought was added\")\r\n                    console.log(thoughtArray)\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            thoughtArray = thoughts;\r\n        }\r\n    }\r\n\r\n    const reload = () => {\r\n        window.location.reload();\r\n    }\r\n\r\n    console.log(thoughtArray)\r\n\r\n    return(\r\n        <div>\r\n            <h2>\r\n                Other people have this in mind:\r\n            </h2>\r\n            {thoughtArray.map((thought,index) => (<Thought id={thought.id} thoughtText={thought.text}/>))}\r\n            <GenericButton onClick={reload} text=\"Show me other thoughts!\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThoughtsPage\r\n","const config = {\r\n    apiKey: \"AIzaSyAu3R_ZPSebhLYgZV3DghcSaA3vsBMq51o\",\r\n    authDomain: \"whatisonyourmind-9b11d.firebaseapp.com\",\r\n    databaseURL:\"https://whatisonyourmind-9b11d-default-rtdb.europe-west1.firebasedatabase.app/\",\r\n    projectId: \"whatisonyourmind-9b11d\",\r\n    storageBucket: \"whatisonyourmind-9b11d.appspot.com\",\r\n    messagingSenderId: \"589681057681\",\r\n    appId: \"1:589681057681:web:158f9b5fef34078acc8430\"\r\n    };\r\n\r\nexport default config","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\nimport GenericButton from './components/GenericButton';\r\nimport TextInput from './components/TextInput';\r\nimport ThoughtsPage from './components/ThoughtsPage';\r\nimport {useState , useEffect} from 'react';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport config from './config'\r\n\r\nconst App = () =>  {  \r\n  // Initialize Firebase \r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n    console.log(\"Firebase initialized\");\r\n  };  \r\n    \r\n  const [userTextInput, setUserTextInput] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  var database = firebase.database().ref('/messages');\r\n\r\n  useEffect (()=> {\r\n    getMessages();\r\n  }, [])\r\n\r\n  const getMessages = async () => {\r\n    database.on('value', (snapshot) => {\r\n      const state = snapshot.val();\r\n      setMessages(state);\r\n      console.log(\"messages retrieved\")\r\n      console.log(state);\r\n    })\r\n    return;\r\n  }\r\n  \r\n  const sendMessage = async () => {\r\n    if(userTextInput !== ''){\r\n      console.log(userTextInput)\r\n      \r\n      console.log(messages);\r\n      console.log(messages.length);\r\n\r\n      firebase.database().ref('messages/' + messages.length).set({\r\n        text: userTextInput\r\n      });\r\n      // This reloads the page and makes you lose state: https://stackoverflow.com/questions/59417162/reactjs-href-causes-state-loss\r\n      window.location.href = './thoughts';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          \r\n          <Route path='/' exact render={() => (\r\n            <>\r\n              <h1>\r\n                What's on your mind?\r\n              </h1>\r\n\r\n              <h2>\r\n                Write a joke, an idea, or just something random.\r\n              </h2>\r\n          \r\n              <TextInput setText={setUserTextInput} defaultText={userTextInput} sendMessage={sendMessage}/>\r\n          \r\n              <GenericButton onClick={sendMessage} text=\"Share it with the world!\"/>\r\n            </>\r\n          )}/>\r\n          \r\n          <Route path='/thoughts' render={() => (\r\n            <>\r\n              <ThoughtsPage thoughts={messages}/>\r\n            </>\r\n          )}/>\r\n\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://github.com/LewisGRobotics\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\">About\r\n          </a>        \r\n        </header>\r\n      </div>\r\n    </Router>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}